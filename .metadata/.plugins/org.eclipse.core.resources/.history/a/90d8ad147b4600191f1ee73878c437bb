
public class ArrayStudent3<T> {

	private final T[] bag;
	private static final int DEFAULT_CAPACITY = 25;
	private int numberOfEntries;
	
	public ArrayStudent3(int capacity)
	{
		numberOfEntries = 0;
		// the cast is safe because the new array contains null entries
		@SuppressWarnings("unchecked")
		T[] tempBag = (T[])new Object[capacity]; // unchecked cast
		bag = tempBag;
	} // end constructor
	
	/** Creates an empty bag whose capacity is 25. */
	public ArrayStudent3()
	{
		this(DEFAULT_CAPACITY);
	} // end default constructor
	
	/** Adds a new entry to this bag.
	@param newEntry the object to be added as a new entry
	@return true if the addition is successful, or false if not */
	public boolean add(T newEntry)
	{
		//< Body to be defined >
		boolean result = true;
		if (isFull())
		{
			result = false;
		}
		else
		{ // assertion: result is true here
			bag[numberOfEntries] = newEntry;
			numberOfEntries++;
		} // end if
		return result;
	} // end add
	/** Retrieves all entries that are in this bag.
	@return a newly allocated array of all the entries in the bag */
	public T[] toArray()
	{
		//< Body to be defined >
		// the cast is safe because the new array contains null entries
		@SuppressWarnings("unchecked")
		T[] result = (T[])new Object[numberOfEntries]; // unchecked cast
		for (int index = 0; index < numberOfEntries; index++)
		{
			result[index] = bag[index];
		} // end for
		return result;
	} // end toArray
	
	/** Sees whether this bag is full.
	@return true if the bag is full, or false if not */
	public boolean isFull()
	{
		//< Body to be defined >
		return numberOfEntries == bag.length;
	} // end isFull
	
	//========================================================================
	/** Sees whether this bag is empty.
	@return true if the bag is empty, or false if not */
	public boolean isEmpty()
	{
		return numberOfEntries == 0;
	} // end isEmpty
	/** Gets the current number of entries in this bag.
	@return the integer number of entries currently in the bag */
	public int getCurrentSize()
	{
		return numberOfEntries;
	} // end getCurrentSize
	
	/** Counts the number of times a given entry appears in this bag.
	@param anEntry the entry to be counted
	@return the number of times anEntry appears in the bag */
	public int getFrequencyOf(T anEntry)
	{
		int counter = 0;
		for (int index = 0; index < numberOfEntries; index++)
		{
			if (anEntry.equals(bag[index]))
			{
				counter++;
			} // end if
		} // end for
		return counter;
	} // end getFrequencyOf
	
	/** Tests whether this bag contains a given entry.
	@param anEntry the entry to locate
	@return true if the bag contains anEntry, or false otherwise */
	public boolean contains(T anEntry)
	{
		boolean found = false;
		for (int index = 0; !found && (index < numberOfEntries); index++)
		{
			if (anEntry.equals(bag[index]))
			{
				found = true;
			} // end if
		} // end for
		return found;
	} // end contains
	
	// Question 1
	// 1.1 - Doubles the size of the array bag if it is full.
	// 1.2 - Indicate the most appropriate method to call the ensureCapacity
	@SuppressWarnings("unchecked")
	private void ensureCapacity()
	{
		if (isFull()) {
			
			T[] temp = (T[])new Object[bag.length*2];
			for (int i = 0; i < bag.length; i++) {
				temp[i] = bag[i];
			}
			
		}
//			bag.length *= 2; 
		
				
	} // end ensureCapacity
	
	// Question 2
	//	This method returns true if the number of entries in the Array is great than
	// half the size of the array and the size of the array is greater than 20
	private boolean isTooBig() {
		if(numberOfEntries > (bag.length/2) && bag.length > 20)
			return true  ; //implement the method
		else return false;
	}
	// Question 3
	// Reduce the size of the array entries by half and the size of the 
	// array is greater than 20
	private void reduceArray() {
		
	}
	

}
