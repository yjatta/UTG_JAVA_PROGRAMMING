/* Generated By:JavaCC: Do not edit this line. Parser.java */
package utg.mcc.parser;

import utg.mcc.parser.ast.ASTNode;
import utg.mcc.parser.ast.ASTAdd;
import utg.mcc.parser.ast.ASTNot;
import utg.mcc.parser.ast.ASTAnd;
import utg.mcc.parser.ast.ASTOr;
import utg.mcc.parser.ast.ASTAssignStatement;
import utg.mcc.parser.ast.ASTBlockStatement;
import utg.mcc.parser.ast.ASTCall;
import utg.mcc.parser.ast.ASTDeclaration;
import utg.mcc.parser.ast.ASTDiv;
import utg.mcc.parser.ast.ASTEq;
import utg.mcc.parser.ast.ASTExpression;
import utg.mcc.parser.ast.ASTFunDeclaration;
import utg.mcc.parser.ast.ASTGe;
import utg.mcc.parser.ast.ASTGt;
import utg.mcc.parser.ast.ASTIfStatement;
import utg.mcc.parser.ast.ASTIntegerConstant;
import utg.mcc.parser.ast.ASTLe;
import utg.mcc.parser.ast.ASTLt;
import utg.mcc.parser.ast.ASTMul;
import utg.mcc.parser.ast.ASTNe;
import utg.mcc.parser.ast.ASTNeg;
import utg.mcc.parser.ast.ASTParDeclaration;
import utg.mcc.parser.ast.ASTPrintStatement;
import utg.mcc.parser.ast.ASTProgram;
import utg.mcc.parser.ast.ASTReturnStatement;
import utg.mcc.parser.ast.ASTStatement;
import utg.mcc.parser.ast.ASTSub;
import utg.mcc.parser.ast.ASTVarDeclaration;
import utg.mcc.parser.ast.ASTVariable;
import utg.mcc.parser.ast.ASTWhileStatement;
import utg.utils.Message;

public class Parser implements ParserConstants {

  private static Message m = new Message("parser");

  static final public ASTProgram program() throws ParseException {
  ASTProgram p = new ASTProgram();
  ASTDeclaration d = null;
  ASTStatement s = null;
    m.verbose("> program");
    m.i();
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      d = variableDeclaration();
      p.addDeclaration(d);
    }
    label_2:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_2;
      }
      d = functionDeclaration();
      p.addDeclaration(d);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINT:
      case LB:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_3;
      }
      s = statement();
      p.addStatement(s);
    }
    jj_consume_token(0);
    m.d();
    m.verbose("< program");
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVarDeclaration variableDeclaration() throws ParseException {
  Token t = null;
    m.verbose("> variable declaration");
    m.i();
    jj_consume_token(INT);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(SE);
    m.d();
    m.verbose("< variable declaration");
    {if (true) return new ASTVarDeclaration(t.image, "int");}
    throw new Error("Missing return statement in function");
  }

  static final public ASTDeclaration functionDeclaration() throws ParseException {
  Token t = null;
  ASTFunDeclaration d = null;
  ASTBlockStatement b = null;
    m.verbose("> function declaration");
    m.i();
    jj_consume_token(INT);
    t = jj_consume_token(IDENTIFIER);
    d = new ASTFunDeclaration(t.image, "int");
    jj_consume_token(LP);
    parameterDeclarations(d);
    jj_consume_token(RP);
    b = blockStatement();
    d.block = b;
    m.d();
    m.verbose("< function declaration");
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public void parameterDeclarations(ASTFunDeclaration d) throws ParseException {
  ASTParDeclaration p = null;
  Token t = null;
    m.verbose("> parameter declaration");
    m.i();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      t = jj_consume_token(IDENTIFIER);
      p = new ASTParDeclaration(t.image, "int");
      d.addDeclaration(p);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CO:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_4;
        }
        jj_consume_token(CO);
        jj_consume_token(INT);
        t = jj_consume_token(IDENTIFIER);
       p = new ASTParDeclaration(t.image, "int");
       d.addDeclaration(p);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    m.d();
    m.verbose("< parameter declaration");
  }

  static final public ASTBlockStatement blockStatement() throws ParseException {
  ASTBlockStatement b = new ASTBlockStatement();
  ASTVarDeclaration v = null;
  ASTStatement s = null;
  Token t;
    m.verbose("> block");
    m.i();
    t = jj_consume_token(LB);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_5;
      }
      v = variableDeclaration();
      b.addDeclaration(v);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINT:
      case LB:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_6;
      }
      s = statement();
      b.addStatement(s);
    }
    jj_consume_token(RB);
    b.setPosition(t);
    m.d();
    m.verbose("< block");
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement statement() throws ParseException {
  ASTStatement s = null;
  ASTExpression e = null;
  Token t = null;
  Token u = null;
    m.verbose("> statement");
    m.i();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    m.verbose("> assign statement");
    m.i();
      t = jj_consume_token(IDENTIFIER);
      u = jj_consume_token(ASSIGN);
      e = addExpression();
      jj_consume_token(SE);
    ASTVariable v = new ASTVariable(t.image);
    v.setPosition(t);
    s = new ASTAssignStatement(v, e);
    s.setPosition(u);
    m.d();
    m.verbose("< assign statement");
      break;
    case WHILE:
    m.verbose("> while statement");
    m.i();
      s = whileStatement();
    m.d();
    m.verbose("< while statement");
      break;
    case IF:
    m.verbose("> if statement");
    m.i();
      s = ifStatement();
    m.d();
    m.verbose("< if statement");
      break;
    case RETURN:
    m.verbose("> return statement");
    m.i();
      u = jj_consume_token(RETURN);
      e = addExpression();
      jj_consume_token(SE);
    s = new ASTReturnStatement(e);
    s.setPosition(u);
    m.d();
    m.verbose("< return statement");
      break;
    case PRINT:
    m.verbose("> print statement");
    m.i();
      jj_consume_token(PRINT);
      jj_consume_token(LP);
      e = addExpression();
      jj_consume_token(RP);
      jj_consume_token(SE);
    s = new ASTPrintStatement(e);
    m.d();
    m.verbose("< print statement");
      break;
    case LB:
      s = blockStatement();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    m.d();
    m.verbose("< statement");
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTWhileStatement whileStatement() throws ParseException {
  ASTExpression e = null;
  ASTStatement s = null;
    jj_consume_token(WHILE);
    jj_consume_token(LP);
    e = orExpression();
    jj_consume_token(RP);
    s = statement();
    {if (true) return new ASTWhileStatement(e, s);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIfStatement ifStatement() throws ParseException {
  ASTExpression e = null;
  ASTStatement st = null;
  ASTStatement se = null;
    jj_consume_token(IF);
    jj_consume_token(LP);
    e = orExpression();
    jj_consume_token(RP);
    st = statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      se = statement();
      {if (true) return new ASTIfStatement(e, st, se);}
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return new ASTIfStatement(e, st);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression orExpression() throws ParseException {
  ASTExpression result = null;
  ASTExpression e = null;
  Token t;
    m.verbose("> or expression");
    m.i();
    result = andExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(OR);
      e = andExpression();
      result = new ASTOr(result, e);
      result.setPosition(t);
    }
    m.d();
    m.verbose("< or expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression andExpression() throws ParseException {
  ASTExpression result = null;
  ASTExpression e = null;
  Token t;
    m.verbose("> and expression");
    m.i();
    result = relExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(AND);
      e = relExpression();
      result = new ASTAnd(result, e);
      result.setPosition(t);
    }
    m.d();
    m.verbose("< and expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression relExpression() throws ParseException {
  ASTExpression result = null;
  ASTExpression e = null;
  Token t = null;
    m.verbose("> relation expression");
    m.i();
    result = addExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
    case LT:
    case EQ:
    case LE:
    case GE:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        t = jj_consume_token(GT);
        e = addExpression();
      result = new ASTGt(result,e);
      result.setPosition(t);
        break;
      case GE:
        t = jj_consume_token(GE);
        e = addExpression();
      result = new ASTGe(result,e);
      result.setPosition(t);
        break;
      case EQ:
        t = jj_consume_token(EQ);
        e = addExpression();
      result = new ASTEq(result,e);
      result.setPosition(t);
        break;
      case NE:
        t = jj_consume_token(NE);
        e = addExpression();
      result = new ASTNe(result,e);
      result.setPosition(t);
        break;
      case LT:
        t = jj_consume_token(LT);
        e = addExpression();
      result = new ASTLt(result,e);
      result.setPosition(t);
        break;
      case LE:
        t = jj_consume_token(LE);
        e = addExpression();
      result = new ASTLe(result,e);
      result.setPosition(t);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    m.d();
    m.verbose("< relation expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression addExpression() throws ParseException {
  ASTExpression result = null;
  ASTExpression e = null;
  Token t;
    m.verbose("> add expression");
    m.i();
    result = mulExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        t = jj_consume_token(ADD);
        e = mulExpression();
      result = new ASTAdd(result, e);
      result.setPosition(t);
        break;
      case SUB:
        t = jj_consume_token(SUB);
        e = mulExpression();
      result = new ASTSub(result, e);
      result.setPosition(t);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    m.d();
    m.verbose("< add expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression mulExpression() throws ParseException {
  ASTExpression result = null;
  ASTExpression e = null;
  Token t;
    m.verbose("> mul expression");
    m.i();
    result = negExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        t = jj_consume_token(MUL);
        e = negExpression();
      result = new ASTMul(result, e);
      result.setPosition(t);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        e = negExpression();
      result = new ASTDiv(result, e);
      result.setPosition(t);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    m.d();
    m.verbose("<  mul expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression negExpression() throws ParseException {
  ASTExpression result = null;
  ASTExpression e = null;
  Token t;
    m.verbose("> neg expression");
    m.i();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
      t = jj_consume_token(SUB);
      e = priExpression();
      result = new ASTNeg(e);
      result.setPosition(t);
      break;
    case NOT:
      t = jj_consume_token(NOT);
      e = priExpression();
      result = new ASTNot(e);
      result.setPosition(t);
      break;
    case LP:
    case INTEGER:
    case IDENTIFIER:
      result = priExpression();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    m.d();
    m.verbose("<  neg expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression priExpression() throws ParseException {
  ASTExpression result = null;
  ASTCall c = null;
  Token t = null;
    m.verbose("> pri expression");
    m.i();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
    result = new ASTIntegerConstant(Integer.parseInt(token.image));
    result.setPosition(t);
      break;
    case LP:
      jj_consume_token(LP);
      result = orExpression();
      jj_consume_token(RP);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    result = new ASTVariable(t.image);
    result.setPosition(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        jj_consume_token(LP);
      c = new ASTCall(t.image);
      result = c;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LP:
        case SUB:
        case NOT:
        case INTEGER:
        case IDENTIFIER:
          arguments(c);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(RP);
      result.setPosition(t);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    m.d();
    m.verbose("<  pri expression");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public void arguments(ASTCall f) throws ParseException {
  ASTExpression e = null;
    e = addExpression();
    f.addParameter(e);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CO:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
      jj_consume_token(CO);
      e = addExpression();
      f.addParameter(e);
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SE)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9d000,0x400000,0x2000,0x2000,0x9d000,0x9d000,0x800,0x0,0x0,0x3f000000,0x3f000000,0xc0000000,0xc0000000,0x0,0x0,0x80020000,0x80020000,0x20000,0x20000,0x400000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x0,0x0,0x0,0x40,0x40,0x0,0x4,0x8,0x0,0x0,0x0,0x0,0x3,0x3,0x70,0x70,0x0,0x60,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
